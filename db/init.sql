--
-- PostgreSQL database dump
--

-- Dumped from database version 15.2 (Ubuntu 15.2-1.pgdg22.04+1)
-- Dumped by pg_dump version 15.2 (Ubuntu 15.2-1.pgdg22.04+1)

-- Started on 2023-04-10 21:06:25 MSK

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- TOC entry 214 (class 1259 OID 16390)
-- Name: chanel_subscriber; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.chanel_subscriber (
    chanel_id integer NOT NULL,
    subscriber_id integer NOT NULL
);


ALTER TABLE public.chanel_subscriber OWNER TO postgres;

--
-- TOC entry 227 (class 1259 OID 16512)
-- Name: comment; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.comment (
    id integer NOT NULL,
    user_id integer,
    body character varying(1000) NOT NULL,
    created_at timestamp without time zone NOT NULL,
    post_id integer
);


ALTER TABLE public.comment OWNER TO postgres;

--
-- TOC entry 226 (class 1259 OID 16511)
-- Name: message_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.comment ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.message_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 215 (class 1259 OID 16393)
-- Name: notification; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.notification (
    id integer NOT NULL,
    message character varying(1000) NOT NULL,
    type character varying(100) NOT NULL,
    created_at timestamp without time zone NOT NULL,
    link character varying(100),
    user_id integer
);


ALTER TABLE public.notification OWNER TO postgres;

--
-- TOC entry 216 (class 1259 OID 16398)
-- Name: notifications_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.notification ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.notifications_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 217 (class 1259 OID 16399)
-- Name: post; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.post (
    id integer NOT NULL,
    header character varying(100) NOT NULL,
    views integer,
    body character varying(10000) NOT NULL,
    cover character varying(150),
    created_at timestamp without time zone,
    user_id integer,
    active boolean
);


ALTER TABLE public.post OWNER TO postgres;

--
-- TOC entry 218 (class 1259 OID 16404)
-- Name: post_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.post ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.post_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 219 (class 1259 OID 16405)
-- Name: post_tags; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.post_tags (
    post_id integer NOT NULL,
    tag_id integer NOT NULL
);


ALTER TABLE public.post_tags OWNER TO postgres;

--
-- TOC entry 220 (class 1259 OID 16408)
-- Name: tags; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.tags (
    id integer NOT NULL,
    name character varying(30) NOT NULL,
    description character varying(80) NOT NULL,
    icon character varying(150) NOT NULL,
    created_at timestamp without time zone,
    active boolean,
    user_id integer
);


ALTER TABLE public.tags OWNER TO postgres;

--
-- TOC entry 221 (class 1259 OID 16411)
-- Name: tags_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.tags ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.tags_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 222 (class 1259 OID 16412)
-- Name: usr; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.usr (
    username character varying(40) NOT NULL,
    email character varying(50) NOT NULL,
    second_email character varying(50),
    password character varying(100) NOT NULL,
    full_name character varying(40),
    description character varying(50),
    gender character varying(10),
    avatar character varying(200),
    country character varying(50),
    created_at timestamp without time zone NOT NULL,
    active boolean NOT NULL,
    role character varying(15) NOT NULL,
    activation_code character varying(150),
    id integer NOT NULL,
    not_read_notifications integer
);


ALTER TABLE public.usr OWNER TO postgres;

--
-- TOC entry 223 (class 1259 OID 16417)
-- Name: usr_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.usr ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.usr_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 224 (class 1259 OID 16418)
-- Name: usr_notification; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.usr_notification (
    usr_id integer NOT NULL,
    notification_id integer NOT NULL
);


ALTER TABLE public.usr_notification OWNER TO postgres;

--
-- TOC entry 225 (class 1259 OID 16421)
-- Name: usr_tag; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.usr_tag (
    usr_id integer NOT NULL,
    tag_id integer NOT NULL
);


ALTER TABLE public.usr_tag OWNER TO postgres;

--
-- TOC entry 3431 (class 0 OID 16390)
-- Dependencies: 214
-- Data for Name: chanel_subscriber; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.chanel_subscriber (chanel_id, subscriber_id) VALUES (18, 17);
INSERT INTO public.chanel_subscriber (chanel_id, subscriber_id) VALUES (16, 17);
INSERT INTO public.chanel_subscriber (chanel_id, subscriber_id) VALUES (19, 17);
INSERT INTO public.chanel_subscriber (chanel_id, subscriber_id) VALUES (27, 17);
INSERT INTO public.chanel_subscriber (chanel_id, subscriber_id) VALUES (20, 28);


--
-- TOC entry 3444 (class 0 OID 16512)
-- Dependencies: 227
-- Data for Name: comment; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.comment (id, user_id, body, created_at, post_id) VALUES (9, 29, '<p><em>greate</em></p>
', '2023-04-10 16:41:02.287815', 58);
INSERT INTO public.comment (id, user_id, body, created_at, post_id) VALUES (11, 29, '<p><strong>Spring Boot</strong></p>
', '2023-04-10 16:42:07.316731', 59);
INSERT INTO public.comment (id, user_id, body, created_at, post_id) VALUES (12, 28, '<p><em>java</em></p>
', '2023-04-10 16:42:46.516975', 59);
INSERT INTO public.comment (id, user_id, body, created_at, post_id) VALUES (13, 28, '<p>a good post</p>
', '2023-04-10 16:43:29.714107', 58);


--
-- TOC entry 3432 (class 0 OID 16393)
-- Dependencies: 215
-- Data for Name: notification; Type: TABLE DATA; Schema: public; Owner: postgres
--



--
-- TOC entry 3434 (class 0 OID 16399)
-- Dependencies: 217
-- Data for Name: post; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.post (id, header, views, body, cover, created_at, user_id, active) VALUES (45, 'Вышла версия Java SE 19', 3, '<p>Oracle <a href="https://mail.openjdk.org/pipermail/jdk-dev/2022-September/006933.html">презентовала</a> платформу Java SE 19 (Java Platform, Standard Edition 19). В качестве эталонной реализации использовался открытый проект OpenJDK.</p>
<p>В Java SE 19 сохранили обратную совместимость с прошлыми выпусками платформы Java. Большинство ранее написанных Java-проектов без изменений будут работоспособны при запуске под управлением новой версии.</p>
<p>Сборки Java SE 19 (JDK, JRE и Server JRE) готовы для установки на Linux (x86_64, AArch64), Windows (x86_64) и macOS (x86_64, AArch64).</p>
<p>Реализация Java 19 полностью открыта под лицензией GPLv2 с исключениями GNU ClassPath, разрешающими динамическое связывание с коммерческими продуктами.</p>
<p>Java SE 19 будет иметь обычный срок поддержки, обновления для которого будут выпускаться до следующего релиза. Java SE 17 будет иметь длительный срок поддержки (LTS). Обновления для версии будут выпускаться до 2029 года.</p>
<p>В Java 19 включили:</p>
<ul>
<li>
<p>предварительную поддержку шаблонов записей (record pattern), расширяющую появившуюся в Java 16 возможность сопоставления с    образцом средствами для разбора значений классов типа record;</p>
</li>
<li>
<p>поддержку архитектуры RISC-V в сборках для Linux;</p>
</li>
<li>
<p>предварительную поддержку API FFM (Foreign Function &amp; Memory) для организации взаимодействия Java-программ с внешними кодом и данными через вызов функций из внешних библиотек и доступ к памяти вне JVM;</p>
</li>
<li>
<p>поддержку виртуальных потоков, представляющих собой легковесные потоки, значительно упрощающие написание и сопровождение высокопроизводительных многопоточных приложений;</p>
</li>
<li>
<p>четвёртую предварительную реализацию API Vector, предоставляющего функции для векторных вычислений с использованием векторных инструкций процессоров x86_64 и AArch64. Новый API позволяет явно управлять векторизацией для параллельной обработки данных;</p>
</li>
<li>
<p>третью экспериментальную реализацию сопоставления по шаблону в выражениях &quot;switch&quot;, позволяющую в метках &quot;case&quot; использовать гибкие шаблоны с серией значений</p>
</li>
</ul>
<pre><code class="language-Java">Object o = 123L;
   String formatted = switch (o) {
       case Integer i -&gt; String.format(&quot;int %d&quot;, i);
       case Long l    -&gt; String.format(&quot;long %d&quot;, l);
       case Double d  -&gt; String.format(&quot;double %f&quot;, d);
       case String s  -&gt; String.format(&quot;String %s&quot;, s);
       default        -&gt; o.toString();
};
</code></pre>
', 'postCover/8e6526c2-dea1-4a79-b8dd-a996e56530733d185363cf28163014f73a77fbaa0533.jpg', '2023-03-22 21:53:43.182722', 17, true);
INSERT INTO public.post (id, header, views, body, cover, created_at, user_id, active) VALUES (46, 'Безопасная разработка в Java', 0, '<p>Язык программирования Java является одним из самых распространенных языков программирования. На нем написано множество сложных приложений как под Linux, так и под Windows. Однако, как и у любого другого языка программирования, у Java есть свои уязвимости.</p>
<p>Цель этой статьи познакомиться с уязвимостями, типичными для языка программирования Java, а также разобрать практики безопасного кодирования.</p>
<p>Начнем с основных характеристик этого языка. Как и большинство других языков, используемых в серьезной разработке, Java является объектно-ориентированным, то есть, следует четырем принципам ООП: инкапсуляции, полиморфизму, наследованию и абстракции. Этот язык является  строго типизированным, то есть мы не можем смешивать в одном выражении различные типы данных. Также все программы написанные на Java транслируются в байт код, который выполняется на виртуальной машине Java (JVM). Это позволяет на не особо задумываться о том, на какой операционной систем будет выполняться наш Java код.</p>
<p>Такая архитектура языка Java позволяет избежать ряда ошибок, допускаемых разработчиками приложений. Например, программисту придется очень “постараться” для того, чтобы его код содержал уязвимости переполнения буфера. Поскольку строки Java основаны на массивах символов, а Java автоматически проверяет границы массивов, переполнение буфера возможно только в необычных случаях, например, когда из Java вызывается сторонний код, содержащий данные уязвимости, или в случае уязвимостей в реализации JVM.</p>
<p>Но код в Java тоже может содержать ошибки и далее мы поговорим об основных видах таких ошибок.</p>
<h4>Отказ в обслуживании (DoS)</h4>
<p>Многие пользователи приложений, написанных на Java наверняка обращали внимание на прожорливость этих приложений. Соответственно возможны ситуации, когда Java приложение может быть выведено из строя при получении большого объема данных.</p>
<p>Типичным примером уязвимости, приводящей к возникновению отказа в обслуживании является использование метода java.io.BufferedReader readline(). Данный метод используется для чтения данных из сокета или файла до тех пор, пока не встретит в данных символ перевода строки (10, 0х0A) или возврата каретки (13, 0x0D). Если ни один из этих символов не найден, readLine() будет продолжать считывать данные бесконечно. Соответственно, злоумышленник может так подготовить данные, передаваемые на вход приложению, что данные символы не встретятся никогда и в результате может произойти переполнение памяти и отказ в обслуживании. При этом, если разработчик ограничит число строк, которые должны вводиться, злоумышленник может передавать данные в одной строке и тем самым данный защитный механизм никак не поможет.</p>
<p>Для решения этой проблемы OWASP предлагает использовать свою бесплатную библиотеку OWASP Enterprise Security API (ESAPI), которая содержит метод SafeReadLine(). Данный метод читает данные либо до появления вышеупомянутых символов, либо до достижения при чтении заданного количества символов. В примере ниже мы прочитаем не более 20 символов.</p>
<pre><code>ByteArrayInputStream s = new ByteArrayInputStream (&quot;trytohack&quot;.getBytes());

IValidator instance = ESAPI.validator();

try {

 String u = instance.safeReadLine(s, 20);

} catch (ValidationException e) {

//Handle exception

}
</code></pre>
<p>В случае, если разработчик не хочет использовать данный метод, он может самостоятельно переопределить BufferedReader и метод readLine() и реализовать ограничение на количество читаемых символов.</p>
<p>Еще одной типовой ошибкой программиста, зачастую приводящей к DoS является некорректное выполнение так называемых парных операций, например, операций связанных с открытием файлов. Когда мы завершаем работу с каким-либо файлом, его необходимо корректно закрыть, но многие забывают это сделать.</p>
<p>Начиная с 7-й версии Java разработчик может использовать новый оператор try-with-resources. В общем случае выглядит он довольно просто:</p>
<pre><code>try (Класс имя = new Класс())

{

     Код, который работает с переменной имя

}
</code></pre>
<p>По сути, это еще одна разновидность оператора try. После ключевого слова try нужно добавить круглые скобки, а внутри них — создать объекты с внешними ресурсами. Для объекта, указанного в круглых скобках, компилятор сам добавит секцию finally и вызов метода close(), которые ранее программист должен был указывать сам.</p>
<p>Вот пример работы с файлом. После завершения работы с файлом inp.txt, он будет автоматически закрыт.</p>
<p>SQL инъекции в Java
Полагаю, суть SQL инъекций знакома всем: не доверенные пользовательские данные без надлежащей обработки начинают восприниматься как команды. Как правило, для реализации данных атак применяются манипуляции со спецсимволами. Данный вид уязвимостей актуален в том числе и для Java.</p>
<p>В языке Java для работы с запросами SQL имеются два основных класса:</p>
<p>java.sql.Statement</p>
<p>java.sql.PreparedStatement</p>
<p>Рассмотрим работу с классом java.sql.Statement. Фрагмент кода ниже содержит пример выполнения запроса. Строка query представляет собой SQL запрос к базе users при этом выборка по значениям в базе осуществляется по значениям параметров user.name и user.pass, которые помещаются в тело запроса с помощью конкатенации.</p>
<pre><code>Statement statement = connect.createStatement();

String query = &quot;SELECT user, id, pass FROM users WHERE user=''&quot; +

                                                           user.name + &quot;'' AND pass = ''&quot; + user.pass + &quot;''&quot;;

ResultSet resultSet = statement.executeQuery(query);
</code></pre>
', 'postCover/1cb91ec0-21f4-403d-967b-5ebc213a1e510252fe1e2590f8e7b57f3435a43c19fd.png', '2023-03-22 22:27:42.638348', 16, true);
INSERT INTO public.post (id, header, views, body, cover, created_at, user_id, active) VALUES (48, 'Делаем бесконечную рабочую область без Canvas', 0, '<p>В предыдущей статье я рассказывал, как мы рисуем соединения между нодами на наших пространствах. Сейчас же я расскажу, как у нас реализованы сами пространства!</p>
<p>Рабочее пространство в нашем приложении представляет собой бесконечную доску, по которой могут перемещаться ноды. Необходимо реализовать масштабирование этого пространства и перемещение по нему. Все это мы делаем без использования Canvas, так как приложение построено на React, в дизайн-системе используется antd, а ноды могут быть огромными формами. Согласитесь, реализовывать такие интерфейсы было бы гораздо сложнее, не будь у нас доступа к нативным средствам HTML-5.</p>
<h4>Как все устроено</h4>
<p>Если вы читали статью про соединения, то у вас уже есть представление, как у нас устроен DOM. Разберем его здесь чуть более подробно. Все обернуто в .app с position: relative, а так же шириной и высотой в 100%. relative нужен чтобы контролировать внутри дивы с абсолютным позиционированием относительно себя, а ширина с высотой, очевидно, чтобы занимать собой весь экран. Остальные контейнеры имеют схожие стили, с тем лишь отличием, что основной контейнер имеет overflow: hidden.</p>
<pre><code>&lt;div class=&quot;app&quot;&gt;
	&lt;div class=&quot;container&quot;&gt;
		&lt;div class=&quot;nodes-container&quot;&gt;
			&lt;div class=&quot;node&quot;&gt;node #1&lt;/div&gt;
			&lt;div class=&quot;node&quot;&gt;node #2&lt;/div&gt;
			&lt;div class=&quot;node&quot;&gt;node #3&lt;/div&gt;
            &lt;div class=&quot;node&quot;&gt;node #4&lt;/div&gt;
		&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<pre><code>html, body {
  width: 100%;
  height: 100%;
}

.app {
  overflow: hidden;
  width: 100%;
  height: 100%;
  position: relative;
}

.container, .nodes-container  {
  position: absolute;
  width: 100%;
  height: 100%;
  top: 0px;
  left: 0px;
}

.container {
  overflow: hidden;
}

.node {
  position: absolute;
}
</code></pre>
<p>Для отображения смещения и приближения достаточно будет всего одного css-свойства transform с параметрами в виде двух функций: translate(), которая выполняет смещение по x и y на заданные величины и scale(), которaя меняет размер элемента на заданный множитель. Пример, который будет смещать элемент на 20px по оси x, на 40px по оси y и увеличивать его в 2 раза:</p>
<pre><code>transform: translate(20px, 40px) scale(2);
</code></pre>
<p>Это свойство будет применяться к .nodes-container. Как уже упоминалось, все контейнеры по размеру равны разрешению экрана пользователя. .container имеет overflow: hidden, поэтому нативный скролл не появится, какими бы по размеру не были внутренние элементы. При этом .node относительно .nodes-container может иметь любое положение, в том числе и за его пределами, а translate() не имеет ограничений. Таким образом достигается эффект бесконечности, когда .node можно задать любые координаты и смещением .nodes-container вывести его на экран:</p>
<pre><code>&lt;div class=&quot;nodes-container&quot; style=&quot;transform: translate(0px, 0px) scale(1);&quot;&gt;
	&lt;div class=&quot;node&quot; style=&quot;top: -20px; left: -60px;&quot;&gt;node #1&lt;/div&gt;
	&lt;div class=&quot;node&quot; style=&quot;top: 230px; left: 150px;&quot;&gt;node #2&lt;/div&gt;
	&lt;div class=&quot;node&quot; style=&quot;top: 330px; left: 350px;&quot;&gt;node #3&lt;/div&gt;
	&lt;div class=&quot;node&quot; style=&quot;top: 1200px; left: 600px;&quot;&gt;node #4&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h4>Перемещение</h4>
<p>Теперь надо дать пользователю возможность управлять смещением. Это будет реализовано через перетаскивание.</p>
<p>В качестве примера используется React-компонент, но все указанные техники могут быть применены как с другими библиотеками, так и на нативном JS.</p>
<p>В компоненте будет использовано два стейта: viewport для хранения информации о текущем положении и isDragging, чтобы отслеживать, когда надо захватывать перемещения курсора. viewport содержит в себе offset - объект смещения по осям x и y, а zoom соответственно является множителем для увеличения. Будем считать, что по умолчанию смещение равно нулю, а увеличение единице.</p>
<p>Нам потребуется отслеживать три события:</p>
<ol>
<li>mouseDown - начинаем отслеживать перемещения курсора.</li>
<li>mouseUp - перестаем отслеживать перемещения курсора.</li>
<li>mouseMove - собственно отслеживаем перемещение.</li>
</ol>
<p>Перехватчики этих событий будут висеть на .app, чтобы гарантированно работать в любом месте экрана. С первыми двумя все понятно, они просто изменяют isDragging при нажатии и отжатии. На handleMouseMove остановимся подробнее. Во-первых это событие должно срабатывать, когда isDragging === true, а во-вторых, если e.buttons !== 1, то есть никакая кнопка не нажата, isDragging меняется на false и отслеживание прекращается. Это предупреждает ситуацию, когда по какой-то причине отжатие кнопки не было отслежено handleMouseUp (например, отжали ее на адресной строке, вне приложения), поле не продолжало хаотично двигаться, а принудительно происходила остановка отслеживания курсора. В конце концов, если все проверки пройдены, обновляется viewport.</p>
<p>MouseEvent предоставляет свойства movementX и movementY, которые являются дельтой движения курсора. Достаточно добавлять эту дельту к предыдущему offset. Таким образом, при каждом срабатывании mouseMove будет обновляться viewport, обновление которого, в свою очередь, будет изменять transform у .nodes-container.</p>
<pre><code>export default function App() {
  const [viewport, setViewport] = useState({
    offset: {
      x: 0.0,
      y: 0.0
    },
    zoom: 1
  });

  const [isDragging, setIsDragging] = useState(false);

  const handleMouseDown = () =&gt; {
    setIsDragging(true);
  };

  const handleMouseUp = () =&gt; {
    setIsDragging(false);
  };

  const handleMouseMove = (e: React.MouseEvent) =&gt; {
    if (!isDragging) {
      return;
    }

    if (e.buttons !== 1) {
      setIsDragging(false);

      return;
    }

    setViewport((prev) =&gt; ({
      ...prev,
      offset: {
        x: prev.offset.x + e.movementX,
        y: prev.offset.y + e.movementY
      }
    }));
  };

  return (
    &lt;div
      className=&quot;app&quot;
      onMouseDown={handleMouseDown}
      onMouseUp={handleMouseUp}
      onMouseMove={handleMouseMove}
    &gt;
      &lt;div className=&quot;container&quot;&gt;
        &lt;div
          className=&quot;nodes-container&quot;
          style={{
            transform: `translate(${viewport.offset.x}px, ${viewport.offset.y}px) scale(${viewport.zoom})`
          }}
        &gt;
          {/* ... */}
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  );
}
</code></pre>
<br>
#### Заключение
К этому пространству будут хорошими дополнениями поддержка скролла для перемещения, как вертикального, так и горизонтального (что опять же очень удобно для пользователей с ноутбуками), поддержка касаний и ограничение перемещения, основанное на крайних нодах. Все это будет несложно добавить, имея готовую базу. На этом все, спасибо за внимание!
', 'postCover/92d67f6f-afb0-4d44-b298-d193652887586ade23ca744bb259d8aeae6666283243.png', '2023-03-22 23:09:44.61527', 18, true);
INSERT INTO public.post (id, header, views, body, cover, created_at, user_id, active) VALUES (47, 'Руны и лёд: техническое собеседование по TypeScript', 0, '<p>Крисс проводит тебя в комнату для совещаний.</p>
<p>Он облачён в худи, не похож ни на какого конкретного зверя, но выглядит знакомо. Однако ты уверен, что вы раньше не встречались. Комната тоже знакома, хотя ты в ней впервые.</p>
<p>«Как дела?», — спрашивает он.</p>
<p>Сложный вопрос для начала беседы, придётся объяснять внутренний механизм, приводящий в движение твои действия. Возможно, он риторический?</p>
<p>«Действительно, как?», — улыбаешься ты.</p>
<p>«… хм, отлично. Ну, приступим?»</p>
<p>Ты утвердительно киваешь.</p>
<p>«Хорошо. Мы займёмся небольшой программной головоломкой, чтобы я понял, как ты умеешь решать задачи. Не волнуйся, если не получится сделать это упражнение, мне главное понять, как ты мыслишь и общаешься».</p>
<p>Волноваться? Ты с трудом вспоминаешь это ощущение. Возможно, оно осталось в твоей юности, когда ты зимовал на Свальбарде* с медведями. Ещё до того, как ты понял сейд.</p>
<p>*Норвежское название Шпицбергена.</p>
<p>«Задача называется N-Queens, — продолжил Крисс. — Она довольно проста. На шахматной доске размером NxN нужно расположить N королев так, чтобы они не угрожали друг другу. Постарайся, чтобы код был кратким».</p>
<p>Ручеёк ощущаемого тобой дежавю превратился в наводнение. Ты действительно видел Крисса раньше. В этой комнате, решая эту головоломку. Но в памяти нет следов. Возможно, в прошлой жизни? Но он слишком молод для этого.</p>
<p>На секунду делаешь паузу, чтобы собраться.</p>
<p>«Я могу использовать любой язык?», — повторяешь ты.</p>
<p>«Ну… в основном мы пишем на TypeScript. И у нас был довольно… неудачный опыт с людьми, пишущими на других языках. Один кандидат использовал Haskell, но мне с трудом удавалось разбираться в том, что он делал. Код был не особо кратким».</p>
<p>Ах, вот что. Здесь был Видрун. Это объясняет дежавю. У вас есть много общего.</p>
<p>«Значит, TypeScript», — соглашаешься ты. Крисс выглядит спокойным. Его судьба уже предрешена.</p>
<p>«Нам нужно начать с нескольких рун», — произносишь ты.</p>
<p>Крисс мгновенно реагирует. «Руны, как в Go? Разве мы только что не договорились о TypeScript?»</p>
<p>«О, нет, не такие руны. Руны, тени смысла. Символические. Уникальные».</p>
<p>Делаешь вдох, создаёшь начертание.</p>
<pre><code>const ᚾ = Symbol()
const ᛊ = Symbol()
const ᛚ = Symbol()
const ᛞ = Symbol()
</code></pre>
<p>«Видишь ли, в TypeScript используется утиная типизация. А одну утку нельзя путать с другой».</p>
<p>«Ты имеешь в виду, что он имеет структурную типизацию? В отличие от языков с номинальной типизацией наподобие Java или Haskell?»</p>
<p>«Да, именно так», — отвечаешь ты. Возможно, Крисс всё-таки поспевает за тобой. «Смотри, я покажу тебе».</p>
<p>Ты вызываешь саму космическую пустоту и связываешь её с сутью ᚾ. Нужда, небытие, тщетное желание стать чем-то.</p>
<pre><code>type Nil = typeof ᚾ
</code></pre>
<p>«Постой-ка, разве у нас уже нет null и undefined? Зачем определять собственный тип для Nil?»</p>
<p>«Встроенные типы отягощены множеством лишнего — null, undefined, ложные ценности. Лучше начать с чистого листа».</p>
<p>Довольно улыбаясь, вспоминая Видруна, ты завершаешь связанный список.</p>
<pre><code>type Cons&lt;x, xs&gt; = [x, xs]
</code></pre>
<p>Ты слышишь, как прервалось дыхание Крисса. Нужно действовать быстро, пока ты его не потерял.</p>
<p>«Добавим булевы значения, чтобы обозначить угрозу и безопасность».</p>
<p>Истина, огонь, солнце. Они связаны с ᛊ.</p>
<p>Ложь, фальшь, глубины озера. Связаны с ᛚ.</p>
<pre><code>type True = typeof ᛊ
type False = typeof ᛚ
</code></pre>
<p>«И немного простой магии».</p>
<pre><code>type Not&lt;b1&gt; = b1 extends True ? False : b1 extends False ? True : never
type Or&lt;b1, b2&gt; = b1 extends True ? True : b2 extends True ? True : False
</code></pre>
<p>Существует ли вообще хоть какая-то истина? Иногда ты задаёшься этим вопросом.</p>
<p>type AnyTrue<list> = list extends Cons&lt;infer x, infer xs&gt;
? x extends True
? True
: AnyTrue<xs>
: False</p>
<p>«Понадобится записывать координаты королев, поэтому нужны и числа».</p>
<p>Начинаешь со строящего козни нуля. ᛞ, руна дня. Используем нулевой день и переносим ноль.</p>
<pre><code>type Zero = typeof ᛞ
</code></pre>
<p>«Теперь мы можем определить остальные натуральные числа, основываясь на нуле».</p>
<pre><code>type S&lt;n&gt; = [n]

type One   = S&lt;Zero&gt;
type Two   = S&lt;One&gt;
type Three = S&lt;Two&gt;
type Four  = S&lt;Three&gt;
type Five  = S&lt;Four&gt;
type Six   = S&lt;Five&gt;
</code></pre>
<p>Лицо Крисса уже полностью серое. Его дыхание начинает паром вырываться изо рта, а прохлада в воздухе становится всё сильнее. Он знает, что грядёт.</p>
<p>«Нам нужно иметь возможность выполнять пару операций с нашими числами. Равенство, разность».</p>
<p>«Важные концепции для компании, подобной вашей», — добавляешь ты, отмечая отчётливое отсутствие последнего качества в тундре офиса открытого типа.</p>
<pre><code>type Equals&lt;a, b&gt; = a extends S&lt;infer a_&gt;
    ? b extends S&lt;infer b_&gt;
        ? Equals&lt;a_, b_&gt;
        : False
    : b extends Zero
        ? True
        : False

type AbsDiff&lt;a, b&gt; = a extends S&lt;infer a_&gt;
    ? b extends S&lt;infer b_&gt;
        ? AbsDiff&lt;a_, b_&gt;
        : a
    : b extends S&lt;any&gt;
        ? b
        : Zero
</code></pre>
<p>Когда тепло начинает возвращаться в комнату, Крисс постепенно приходит в себя.</p>
<p>«Да, решение выглядит корректным, но в коде достаточно сложно разобраться, он не очень краткий», — заявляет он ошибочно.</p>
<p>«О, в основном это просто бойлерплейт TypeScript. Думаю, после компиляции в JavaScript он покажется тебе абсолютно кратким», — уверяю я его.</p>
<p>Ты запускаешь компилятор.</p>
', 'postCover/c4a39750-4d65-42b0-b64b-9bd6b22ac61eshfgfndprod2-iqn8xwgtl1jwey.png', '2023-03-22 23:00:08.060798', 18, true);
INSERT INTO public.post (id, header, views, body, cover, created_at, user_id, active) VALUES (51, 'Забытый мир BBS Door Games', 5, '<p>Ещё до того, как интернет появился в каждом тостере, юзеры находили способы общаться с единомышленниками и вместе играть в онлайн-игры. С начала 1980-х до середины 1990-х годов процветали так называемые BBS (Bulletin Board Systems) или системы досок объявлений. Подключались к ним с помощью телефонных сетей и модемов с коммутируемым доступом. Одним из совместных развлечений в BBS были онлайн-игры, известные как «Door Games». Перечислить их все невозможно, но попробуем краешком глаза взглянуть на легендарные игры</p>
<p><img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/bb6/305/dfe/bb6305dfebd2e1842eb853eb2e456886.jpeghttp://" alt="" /></p>
<h3>Что это вообще за «Door Games»</h3>
<p>«Door Games» получили такое название из-за того, что доступ к ним в BBC осуществлялся через своеобразный «дверной проем» между программным обеспечением BBS и отдельной, независимо работающей программой игры.</p>
<p>Многопользовательский режим таких «дверных» игр заключался преимущественно в пошаговой системе. Пользователи последовательно звонили в разное время дня, чтобы использовать минуты отведённого им игрового времени и сделать свой ход. Игры, в которые несколько игроков играли одновременно, тоже существовали, но они были скорее исключением из‑за затрат на запуск многолинейной системы BBS.</p>
<p>Поскольку доступ к BBS обычно осуществлялся через текстовые программы‑эмуляторы терминала, большинство дверных игр не могли предложить игрокам никакой другой графики, кроме разноцветных текстовых символов (если только они не использовали специальный графический клиент).</p>
<p>Несмотря на то, что по современным меркам в Door Games играло не так уж много людей — всего несколько десятков тысяч пользователей по всему миру — эти ранние онлайн‑игры образуют жизненно важное звено в истории современной игровой индустрии. Дело в том, что пользователями BBS в 1980-х и 1990-х годах были ​​​​те представители населения, которые лучше прочих разбирались в компьютерах. Многие из них продолжали создавать компьютерный мир, который мы видим сегодня (современные компьютерные игры, сайты, приложения для смартфонов). Так что это небольшое ядро было настоящей компьютерной элитой.</p>
<p>Поэтому особенно интересно исследовать этот уголок игровой истории и вспомнить классические Door Games BBS. Это ни в коем случае не рейтинг и далеко не полный список (в то время программисты выпустили сотни игр), а всего лишь небольшая часть богатого периода компьютерной истории.</p>
<p>Кстати, все картинки из игр — это фотографии, сделанные Бенджем Эдвардсом с монитора VGA, а запущены они через терминальную программу Telix. Это позволит получить достоверное представление о том, как эти игры выглядели в их естественной среде — IBM PC под управлением MS‑DOS.</p>
<h5>1. Operation: Overkill II</h5>
<p><img src="http:https://habrastorage.org/r/w1560/getpro/habr/upload_files/890/8b1/3c4/8908b13c462f9345478677c43398e3ad.jpeg//" alt="" /></p>
<p>Дата выпуска: 1988 г.</p>
<p>Создатель: Дастин Налф</p>
<p>Эта игра создана под вдохновением от классической Wasteland для ПК. Вы играете за модифицированного солдата, блуждающего по постапокалиптическому миру. Вас окружают существа, все мысли и желания которых сосредоточены на том, чтобы вас убить. Пустоши предстают перед вами как в виде текстовых описаний, так и в виде новаторской (для того времени) карты 3×3 (на фотографии выше это область в левом верхнем углу под названием «Инфракрасное сканирование»). Бой ведётся в реальном времени и требует от игрока некоторых навыков. Чтобы нанести более сильный удар по врагу, нужно нажимать пробел во время определенной повторяющейся последовательности букв. OOII (как для краткости называют игру) остается одной из самых глубоких и сложных CRPG, доступных на BBS.</p>
<h5>2.  TradeWars 2002 г.</h5>
<p><img src="https://habrastorage.org/r/w1560/getpro/habr/upload_files/ca3/32f/0ab/ca332f0abd4af9711be57b0c76094a2e.jpeghttp://" alt="" /></p>
<p>Дата выпуска: 1991 г.</p>
<p>Создатель: Гэри Мартин</p>
<p>Эта игра о торговле ресурсами и космических сражениях имеет богатую историю в мире BBS. Самые ранние её предшественники появились ещё в начале 1980-х годов и все были идейными наследниками сериала «Звёздный путь». Текущее воплощение игры, TradeWars 2002, было запущено в 1991 году и на протяжении десятилетий постоянно совершенствовалось, сохраняя при этом изначальный текстовый формат. С тех пор тысячи игроков регулярно посещают вселенную TradeWars, в текущей версии, которую можно установить на современной операционке и играть онлайн без BBS. Такое поразительное долголетие определённо делает TW2002 одной из самых важных и хорошо продуманных онлайн‑игр всех времён.</p>
', 'postCover/27a1d004-983a-40b9-adc5-628bc73647ac264eb1a39889f4e47dfc0185179f07c1.jpg', '2023-03-23 00:09:11.152145', 16, true);
INSERT INTO public.post (id, header, views, body, cover, created_at, user_id, active) VALUES (57, 'Проблема с N+1 запросами в JPA и Hibernate', 28, '<h6>Введение</h6>
<p>В этой статье я расскажу, в чем состоит проблема N + 1 запросов при использовании JPA и Hibernate, и как ее лучше всего исправить.</p>
<p>Проблема N + 1 не специфична для JPA и Hibernate, с ней вы можете столкнуться и при использовании других технологий доступа к данным.</p>
<h6>Что такое проблема N + 1</h6>
<p>Проблема N + 1 возникает, когда фреймворк доступа к данным выполняет N дополнительных SQL-запросов для получения тех же данных, которые можно получить при выполнении одного SQL-запроса.</p>
<p>Чем больше значение N, тем больше запросов будет выполнено и тем больше влияние на производительность. И хотя лог медленных запросов может вам помочь найти медленные запросы, но проблему N + 1 он не обнаружит, так как каждый отдельный дополнительный запрос выполняется достаточно быстро.</p>
<p>Проблема заключается в выполнении множества дополнительных запросов, которые в сумме выполняются уже существенное время, влияющее на быстродействие.</p>
<p>Рассмотрим следующие таблицы БД: post (посты) и post_comments (комментарии к постам), которые связаны отношением &quot;один-ко-многим&quot;:</p>
<img height="130px" src="https://habrastorage.org/getpro/habr/upload_files/4ff/58c/16a/4ff58c16a7b8e7cf08d6ee64c17e5bb0">
<pre><code>INSERT INTO post (title, id)
VALUES (''High-Performance Java Persistence - Part 1'', 1)
  
INSERT INTO post (title, id)
VALUES (''High-Performance Java Persistence - Part 2'', 2)
  
INSERT INTO post (title, id)
VALUES (''High-Performance Java Persistence - Part 3'', 3)
  
INSERT INTO post (title, id)
VALUES (''High-Performance Java Persistence - Part 4'', 4)
</code></pre>
<p>А в таблицу post_comment четыре дочерние записи:</p>
<pre><code>INSERT INTO post_comment (post_id, review, id)
VALUES (1, ''Excellent book to understand Java Persistence'', 1)
  
INSERT INTO post_comment (post_id, review, id)
VALUES (2, ''Must-read for Java developers'', 2)
  
INSERT INTO post_comment (post_id, review, id)
VALUES (3, ''Five Stars'', 3)
  
INSERT INTO post_comment (post_id, review, id)
VALUES (4, ''A great reference book'', 4)
</code></pre>
<br>
<h6>Проблема N+1 с простым SQL</h6>
<p>Как уже говорилось, проблема N + 1 может возникнуть при использовании любой технологии доступа к данным, даже при прямом использовании SQL.</p>
<p>Если вы выберете post_comments с помощью следующего SQL-запроса:</p>
<pre><code>List&lt;Tuple&gt; comments = entityManager.createNativeQuery(&quot;&quot;&quot;
    SELECT
        pc.id AS id,
        pc.review AS review,
        pc.post_id AS postId
    FROM post_comment pc
    &quot;&quot;&quot;, Tuple.class)
.getResultList();
</code></pre>
<h6>Проблема N + 1 с JPA и Hibernate</h6>
<p>При использовании JPA и Hibernate есть несколько способов получить проблему N + 1, поэтому очень важно знать, как избежать таких ситуаций.</p>
<p>Рассмотрим следующие классы, которые мапятся на таблицы post и post_comments:</p>
<img height="150px" src="https://habrastorage.org/getpro/habr/upload_files/e55/a23/fe3/e55a23fe3a8942c88c987603fbcef228">
<p>JPA-маппинг выглядят следующим образом:</p>
<pre><code>@Entity(name = &quot;Post&quot;)
@Table(name = &quot;post&quot;)
public class Post {
 
    @Id
    private Long id;
 
    private String title;
 
    //Getters and setters omitted for brevity
}
 
@Entity(name = &quot;PostComment&quot;)
@Table(name = &quot;post_comment&quot;)
public class PostComment {
 
    @Id
    private Long id;
 
    @ManyToOne
    private Post post;
 
    private String review;
 
    //Getters and setters omitted for brevity
}
</code></pre>
<h6>FetchType.EAGER</h6>
<p>Использование явного или неявного FetchType.EAGER для JPA-ассоциаций — плохая идея, потому что будет загружаться гораздо больше данных, чем вам нужно. Более того, стратегия FetchType.EAGER также подвержена проблемам N + 1.</p>
<p>К сожалению, ассоциации @ManyToOne и @OneToOne по умолчанию используют FetchType.EAGER, поэтому, если ваши маппинги выглядят следующим образом:</p>
<pre><code>SELECT
    pc.id AS id1_1_,
    pc.post_id AS post_id3_1_,
    pc.review AS review2_1_
FROM
    post_comment pc
 
SELECT p.id AS id1_0_0_, p.title AS title2_0_0_ FROM post p WHERE p.id = 1
SELECT p.id AS id1_0_0_, p.title AS title2_0_0_ FROM post p WHERE p.id = 2
SELECT p.id AS id1_0_0_, p.title AS title2_0_0_ FROM post p WHERE p.id = 3
SELECT p.id AS id1_0_0_, p.title AS title2_0_0_ FROM post p WHERE p.id = 4
</code></pre>
<p>Обратите внимание на дополнительные запросы SELECT, которые появились, потому что перед возвращением списка сущностей PostComment необходимо извлечь ассоциацию с post.</p>
<p>В отличие от значений по умолчанию, используемых в методе find из EntityManager, в JPQL-запросах и Criteria API явно указывается план выборки (fetch plan), который Hibernate не может изменить, автоматически применив JOIN FETCH. Таким образом, вам это нужно делать вручную.</p>
', 'postCover/1a21c866-a289-4722-8f99-8bf262a0fe511591c71d25063de7627973f6d01f299.jpg', '2023-03-24 22:47:14.396792', 19, true);
INSERT INTO public.post (id, header, views, body, cover, created_at, user_id, active) VALUES (50, 'Перевод: Защита ваших репозиториев Git: Исчерпывающее руководство по использованию Gitleaks', 1, '<p>Gitleaks — это инструмент с открытым исходным кодом, предназначенный для предотвращения размещения конфиденциальных данных в репозиториях Git. Он работает путем сканирования Git‑репозиториев на наличие потенциальных секретов, таких как пароли, API‑ключи и другая конфиденциальная информация, которая не должна быть публично раскрыта.</p>
<p>Инструмент хорошо настраивается и поддерживает широкий спектр форматов файлов, включая текстовые, двоичные и даже зашифрованные файлы. Gitleaks можно использовать как инструмент командной строки или как часть конвейера CI/CD, чтобы помочь отловить конфиденциальные данные до их размещения в репозитории.</p>
<p>Gitleaks использует регулярные выражения для идентификации потенциально конфиденциальных данных, а его правила можно легко настроить для соответствия конкретным интересующим шаблонам. Он также поддерживает маскировку определенных шаблонов или полное игнорирование определенных файлов или каталогов.</p>
<p>Gitleaks может быть полезен всем, кто работает с Git‑репозиториями, особенно тем, кто имеет дело с конфиденциальными данными. Это эффективный способ предотвратить случайные утечки и обеспечить защиту конфиденциальной информации.</p>
<h4>Вот шпаргалка по использованию Gitleaks:</h4>
<p>Установите Gitleaks: Вы можете установить Gitleaks на свою систему с помощью менеджера пакетов для вашей операционной системы или загрузив бинарный релиз со страницы Gitleaks на GitHub.</p>
<p>Настройте Gitleaks: Вы можете настроить Gitleaks, создав конфигурационный файл с правилами, которые вы хотите использовать. По умолчанию Gitleaks поставляется с набором предопределенных правил, предназначенных для обнаружения распространенных типов конфиденциальной информации, таких как пароли, API-ключи и SSH-ключи.</p>
<ol>
<li>
<p>Сканирование репозиториев: Вы можете сканировать репозитории с помощью Gitleaks, выполнив команду gitleaks --repo=&lt;путь к репозиторию&gt; из командной строки. Вы также можете указать дополнительные параметры, такие как количество используемых потоков и формат вывода.</p>
</li>
<li>
<p>Интеграция с конвейерами CI/CD: Вы можете интегрировать Gitleaks в ваш CI/CD конвейер для автоматического сканирования репозиториев на предмет потенциальных утечек. Для этого нужно добавить в конфигурационный файл конвейера шаг Gitleaks и указать хранилище для сканирования.</p>
</li>
<li>
<p>Настроить правила: Вы можете настроить правила Gitleaks так, чтобы они соответствовали определенным интересующим вас шаблонам. Это можно сделать путем редактирования конфигурационного файла и добавления или изменения регулярных выражений.</p>
</li>
<li>
<p>Маскировка конфиденциальной информации: Вы можете настроить Gitleaks на маскировку определенных шаблонов конфиденциальной информации, такой как пароли или ключи API, в своих выводах. Это можно сделать, указав опцию --redact при запуске Gitleaks.</p>
</li>
<li>
<p>Игнорировать файлы или каталоги: Вы можете настроить Gitleaks на игнорирование определенных файлов или каталогов при сканировании репозиториев. Это можно сделать, добавив в конфигурационный файл правила, которые исключают файлы или каталоги на основе их имени или расположения.</p>
</li>
</ol>
<h4>Ниже приведены некоторые общие примеры команд для Gitleaks:</h4>
<h5>Сканирование одного хранилища:</h5>
<pre><code>gitleaks --repo=/path/to/repository
</code></pre>
<p>Эта команда просканирует указанный репозиторий на предмет потенциальной утечки конфиденциальной информации.</p>
<h4>Сканирование нескольких хранилищ:</h4>
<p>Эта команда просканирует все хранилища, перечисленные в конфигурационном файле config.toml.</p>
<pre><code>[[repos]]
  repo = &quot;/path/to/repo1&quot;
  branches = [&quot;master&quot;, &quot;develop&quot;]
  [[repos.rules]]
    regex = &quot;password&quot;
    max_severity = &quot;high&quot;
  [[repos.rules]]
    regex = &quot;AWS_SECRET_ACCESS_KEY&quot;
    max_severity = &quot;medium&quot;
[[repos]]
repo = &quot;/path/to/repo2&quot;
branches = [&quot;main&quot;]
[[repos.rules]]
regex = &quot;api_key&quot;
max_severity = &quot;high&quot;
</code></pre>
<p>В этом примере перечислены два репозитория, каждый из которых имеет свой собственный набор правил. Первый репозиторий расположен по адресу /path/to/repo1 и имеет две ветви: master и develop. В этом репозитории заданы два правила: одно для обнаружения слова &quot;password&quot; с максимальной степенью серьезности &quot;high&quot;, а другое для обнаружения строки &quot;AWS_SECRET_ACCESS_KEY&quot; с максимальной степенью серьезности &quot;medium&quot;.</p>
<p>Второй репозиторий расположен по адресу /path/to/repo2 и имеет только одну указанную ветку: main. Этот репозиторий имеет одно правило для обнаружения строки &quot;api_key&quot; с максимальной степенью серьезности &quot;высокая&quot;.</p>
<h5>Укажите формат вывода:</h5>
<pre><code>gitleaks --repo=/path/to/repository --format=json
</code></pre>
<p>Эта команда выведет результаты сканирования в формате JSON.</p>
<h5>Сокращение конфиденциальной информации:</h5>
<pre><code>gitleaks --repo=/path/to/repository --redact
</code></pre>
<p>Эта команда удалит конфиденциальную информацию, такую как пароли и ключи API, из результатов сканирования.</p>
<h5>Игнорировать определенные файлы или каталоги:</h5>
<pre><code>gitleaks --repo=/path/to/repository --exclude-path=path/to/excluded/directory
</code></pre>
<h4>Заключение</h4>
<p>Gitleaks — это мощный инструмент с открытым исходным кодом, предназначенный для предотвращения размещения конфиденциальных данных в репозиториях Git. Он работает путем сканирования Git‑репозиториев на наличие потенциальных секретов, таких как пароли, API‑ключи и другая конфиденциальная информация, которая не должна быть публично раскрыта. Инструмент хорошо настраивается, поддерживает широкий спектр форматов файлов и может использоваться как инструмент командной строки или как часть конвейера CI/CD, чтобы помочь отловить конфиденциальные данные до их размещения в репозитории. Следуя примерам команд и советам, приведенным в шпаргалке, вы сможете эффективно использовать Gitleaks для сканирования и защиты ваших репозиториев от потенциальных утечек конфиденциальной информации.</p>
', 'postCover/b2e6a19e-b388-4148-a050-c6619e42ddf9f9e4f1ac65a212505170e8eb60732fec.png', '2023-03-22 23:59:15.385905', 20, true);
INSERT INTO public.post (id, header, views, body, cover, created_at, user_id, active) VALUES (58, 'GitHub объяснил блокировку аккаунтов команд разработчиков «Сбера» и «Альфа-Банка»', 46, '<p>По <a href="https://www.forbes.ru/tekhnologii/462727-github-ob-asnil-blokirovku-akkauntov-sbera-i-al-fa-banka">информации</a> российского издания Forbes, GitHub объяснил блокировку аккаунтов команд разработчиков «Сбера» и «Альфа-Банка», включая большую часть их открытых репозиториев.</p>
<p>«GitHub, как и любая компания, работающая в США, вынужден соблюдать требования американских властей и должен ограничивать доступ к аккаунтам для пользователей и компаний под блокирующими санкциями Минфина США или которые используют GitHub от имени попавших под санкции компаний или связанные с ними компании и разработчиков», — пояснил представитель команды веб-сервиса для хостинга IT-проектов и их совместной разработки GitHub.</p>
<p>Также он уточнил, что GitHub намерен оставаться глобальной платформой для совместной работы разработчиков, независимо от того, где они проживают. «Мы тщательно изучаем правительственные санкции, чтобы быть уверенными, что пользователи и клиенты не пострадают сверх того, что требуется законом», — заявил представитель GitHub.</p>
<p>Ранее пользователь Хабра рассказал, что с 13 апреля заблокированы по меньшей мере десятки аккаунтов российских компаний на GitHub. Среди них — аккаунты «Сбера», «Альфа-Банка», других компаний, а также отдельных индивидуальных разработчиков, не относящихся к какой-либо компании. Сейчас аккаунты части разработчиков были разблокированы со стороны GitHub.</p>
<p>Многие ссылки на портале разработчиков «Сбера» на GitHub теперь ведут на заглушку с ошибкой 404.</p>
<p>Пока не заблокированы такие открытые ресурсы «Сбера»:</p>
<ul>
<li>Sber AI — на <a href="https://github.com/sberbank-ai">GitHub</a>;</li>
<li><a href="https://rudalle.ru/">ruDALL-E</a> — на <a href="https://github.com/ai-forever/ru-dalle">GitHub</a>;</li>
<li><a href="https://developers.sber.ru/portal/products/rugpt-3">Russian GPT-3 models</a> — <a href="https://github.com/ai-forever/ru-gpts">GitHub.</a></li>
</ul>
<p>Заблокированы открытые репозитории команд разработчиков «Сбера»:</p>
<ul>
<li>большая часть ссылок на <a href="https://developers.sber.ru/portal/categories/open-source">открытом портале</a> Open Source от разработчиков «Сбера»;</li>
<li>SberDevices ;</li>
<li>Sberbank AI Lab;</li>
<li>Open source software developed by Sberbank-Technology.</li>
</ul>
<p>После блокировки аккаунтов на GitHub в «Сбере» пояснили, что оставят все свои Open-Sourсe модели в открытом доступе, так как их используют множество сторонних разработчиков. Сейчас команды «Сбертеха» и отделов переносят проекты и репозитории на другие площадки. Также «Сбер» использует Platform V Works собственной облачной цифровой платформы для agile-разработки. Там есть инструмент для хостинга проектов и их совместной разработки — Git-совместимый репозиторий.</p>
<p>6 апреля 2022 года СМИ сообщили, что Минфин США ввел полные блокирующие санкции против российского банка «Сбер» и крупнейшего в стране частного банка «Альфа-Банк». Санкции предусматривают заморозку активов банков и введение запрета для граждан и компаний из США на ведение бизнеса с ними. Из-за этих санкций мобильные приложения «Сбера» и «Альфа-Банка» оказались удалены из App Store и Google Play. «Google соблюдает все применимые законы о санкциях и соблюдении правил торговли. Если мы обнаруживаем приложение, которое нарушает наши условия использования, мы примем соответствующие меры», — пояснила компания после инцидента.</p>
<p>2 марта 2022 года представители команды веб-сервиса для хостинга IT-проектов и их совместной разработки GitHub закончили спор о том, нужно ли блокировать российских разработчиков. Платформа заявила, что будет следить за ситуацией и не позволит попасть под блокировку всем подряд, включая обычных разработчиков.</p>
<p>В мае 2021 года SberCloud и GitHub планировали запустить локализованный облачный сервис для корпоративной разработки в России на платформе Sbercloud.Advanced</p>
<p>«Мы уверены в успехе нашего партнёрства с GitHub. Локализация популярного во всём мире сервиса корпоративной разработки и размещение его в облаке SberCloud.Advanced позволит ещё большему количеству российских компаний и организаций использовать столь эффективный инструмент при создании бизнес-приложений и сервисов».</p>
<p>— заявляли в «Сбере».</p>
<p>В октябре 2018 года GitHub был выкуплен Microsoft за $7,5 млрд. В настоящее время крупнейший веб-сервис для хостинга IT-проектов и их совместной разработки продолжает открытую политику, направленную на поддержку всех разработчиков, вне зависимости от используемой платформы или языка программирования. Сейчас сервисом пользуются 72 млн разработчиков по всему миру.</p>
<p>В июне 2019 года GitHub начал полностью блокировать репозитории пользователей из Крыма, Кубы, Ирана, Северной Кореи и Сирии. А самим пользователям из попадающих под санкции стран сервис предложил только «ограниченные возможности для общения и комментариев».</p>
<p>5 января 2021 года GitHub получил лицензию от правительства США на возобновление предоставления услуг разработчикам в Иране. Правительство США ввело в 2019 году санкции против Ирана и других стран, соблюдать которые были обязаны американские IT-компании. GitHub также пришлось подчиниться. Иранские разработчики оказались заблокированы, они могли получить доступ только к публичным репозиториям кода. С начала 2021 года им снова доступен полный спектр бесплатных и платных услуг GitHub.</p>
', 'postCover/6ac57aa6-a79f-46bb-8d6a-14fbd6e3a3d34d49efcab6e966913be2f5a35bd1ecb0.jpg', '2023-03-24 23:14:12.910312', 17, true);
INSERT INTO public.post (id, header, views, body, cover, created_at, user_id, active) VALUES (59, 'Spring Boot 2: чего не пишут в release notes', 69, '<p>Когда у масштабного проекта происходит масштабное обновление, всё никогда не бывает просто: неизбежно возникают неочевидные нюансы (проще говоря, грабли). И тогда, как бы хороша ни была документация, с чем-то поможет только опыт — свой или чужой.</p>
<p>На конференции Joker 2018 я рассказал, с какими проблемами столкнулся сам при переходе к Spring Boot 2 и как они решаются. А теперь специально для Хабра — текстовая версия этого доклада. Для удобства в посте есть и видеозапись, и оглавление: можно не читать всё целиком, а перейти непосредственно к волнующей вас проблеме.</p>
<h6>Оглавление</h6>
<iframe width="600" height="350" src="https://www.youtube.com/embed/8jNXZXdb3no" title="Владимир Плизга — Spring Boot 2: чего не пишут в release notes" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
<p>День добрый! Хочу рассказать вам о некоторых особенностях (назовём их граблями), с которыми вы можете столкнуться при обновлении фреймворка Spring Boot на вторую версию и при последующей его эксплуатации.</p>
<p>Меня зовут Владимир Плизгá (GitHub), я работаю в компании «ЦФТ», одном из крупнейших и старейших разработчиков ПО в России. Последние несколько лет занимаюсь там бэкенд-разработкой, отвечая за техническое развитие интернет-банка предоплаченных карт. Как раз на этом проекте я стал инициатором и исполнителем перехода от монолитной архитектуры к микросервисной (который ещё длится). Ну и коль скоро большинство тех знаний, которыми я решил с вами поделиться, накоплено на примере именно этого проекта, расскажу о нём чуть-чуть поподробнее.</p>
<h6>Коротко о подопытном продукте</h6>
<p>Это интернет-банк, который в одиночку обслуживает порядка двух с лишним десятков компаний-партнёров по всей России: предоставляет конечным клиентам возможность управлять их денежными средствами с помощью дистанционного банковского обслуживания (мобильные приложения, сайты). Один из партнеров — компания Билайн и её платёжная карта. Интернет-банк для нее получился неплохим, судя по рейтингу <a href="http://markswebb.ru/e-finance/mobile-banking-rank-2017/">Markswebb Mobile Banking Rank</a>, где наш продукт занял неплохие позиции для новичков.</p>
<p>«Кишочки» всё ещё в переходном процессе, поэтому у нас есть один монолит, так называемое ядро, вокруг которого возведены 23 микросервиса. Внутри у микросервисов Spring Cloud Netflix, Spring Integration и кое-что ещё. А на Spring Boot 2 всё это дело летает примерно с июля месяца. И вот как раз на этом месте остановимся поподробнее. Переводя этот проект на вторую версию, я столкнулся с некоторыми особенностями, о которых и хочу вам рассказать.</p>
<h6>План доклада</h6>
<p>Областей, где появились особенности Spring Boot 2, довольно много, постараемся пробежаться по всем. Чтобы сделать это быстро, нам понадобится опытный сыщик или следователь — кто-то, кто всё это раскопает как будто бы за нас. Поскольку Холмс с Ватсоном уже выступили с докладом на Joker, нам будет помогать другой специалист — лейтенант Коломбо. Вперёд!</p>
<h6>Spring Boot / 2</h6>
<p>Для начала пару слов о Spring Boot в целом и второй версии в частности. Во-первых, вышла эта версия, мягко говоря, не вчера: 1 марта 2018 она уже была в General Availability. Одна из главных целей, которую преследовали разработчики, — это полноценная поддержка Java 8 на уровне исходников. То есть скомпилировать на меньшей версии не удастся, хотя runtime совместим. В качестве основы взят Spring Framework пятой версии, который вышел чуть-чуть раньше Spring Boot 2. И это не единственная зависимость. Ещё у него есть такое понятие, как BOM (Bill Of Materials) — это огромный XML, в котором перечислены все (транзитивные для нас) зависимости от всевозможных сторонних библиотек, дополнительных фреймворков, инструментов и прочего.</p>
<p>Соответственно, не все те спецэффекты, которые привносит второй Spring Boot, произрастают из него самого или из экосистемы Spring. На всё это хозяйство написано два отличных документа: Release Notes и Migration Guide. Документы классные, Spring в этом смысле вообще молодцы. Но, по понятным причинам, там возможно охватить далеко не всё: есть какие-то частности, отклонения и прочее, что либо нельзя, либо не стоит туда включать. О таких особенностях и поговорим.</p>
<h6>Compile time. Примеры изменений в API</h6>
<p>Начнём с более-менее простых и очевидных граблей: это те, что возникают в compile time. То есть то, что не даст вам даже скомпилировать проект, если вы просто поменяете у Spring Boot в скрипте сборки цифру 1 на цифру 2.</p>
<p>Основной источник изменений, который стал основанием для таких правок в Spring Boot, — это, конечно, переход Spring на Java 8. Кроме того, веб-стек Spring 5 и Spring Boot 2 разделился, условно говоря, на два. Теперь он сервлетный, традиционный для нас, и реактивный. Кроме того, потребовалось учесть ряд недочётов из прошлых версий. Ещё сторонние библиотеки поднакинули (извне Spring). Если посмотреть в Release Notes, то никаких подводных камней с ходу не видно и, честно говоря, когда я впервые читал Release Notes, мне показалось, там вообще всё нормально. И выглядело для меня это примерно вот так:</p>
<iframe width="600" height="350" src="https://www.youtube.com/embed/uJ2P16LXA94" title="Tom &amp; Jerry: Tom is laughing" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
<p>Но, как вы наверняка догадываетесь, всё не так хорошо.</p>
<p>На чем сломается компиляция (пример 1):</p>
<ul>
<li><strong>Почему</strong>: класса WebMvcConfigurerAdapter больше нет;</li>
<li><strong>Зачем</strong>: для поддержки фишек Java 8 (default-методы в интерфейсах);</li>
<li><strong>Что делать</strong>: использовать интерфейс WebMvcConfigurer.</li>
</ul>
<p>Проект может не скомпилироваться как минимум из-за того, что некоторых классов просто больше нет. Почему? Да потому что в Java 8 они не нужны. Если это были адаптеры с примитивной имплементацией методов, то пояснять особо нечего, default-методы всё это отлично решают. Вот на примере этого класса понятно, что достаточно использовать сам интерфейс, и никакие адаптеры уже не понадобятся.</p>
', 'postCover/53996208-6f2e-4603-bff4-46618e81d655a4e3fcwl22r0y3nlx8z-6pkhtny.jpeg', '2023-03-24 23:24:16.564483', 17, true);
INSERT INTO public.post (id, header, views, body, cover, created_at, user_id, active) VALUES (49, 'Информационная безопасность. Специализация', 4, '<p>Материал будет полезен новичкам, которые хотят выбрать специализацию в области ИБ. Статья расскажет о специальностях, которые так или иначе относятся сегодня к информационной безопасности. Основной акцент будет сделан на многообразии специализаций, которые формально могут не относиться к информационной безопасности, но их деятельность может быть использована для исследований, создания систем, которые будут помогать обеспечивать безопасность информации. Рассмотрим перечень курсов, сертификаций и дисциплин для изучения.</p>
<h4>Информационная безопасность и вопрос обучения</h4>
<p>Информационная безопасность - достаточно сложная и обширная дисциплина. Основная её задача - это предоставление возможности контроля целостности, доступности и конфиденциальности. Про ИБ обычно говорят, когда необходимо защитить информацию, которая составляет какую-то ценность для её владельца или для сферы деятельности, где эта информация может быть использована.</p>
<p>К сожалению, даже сегодня не все системы проектируются с подсистемами защиты, поэтому для эффективной реализации информационной безопасности нужно делать доработки, создавать дополнительные надстройки в системе обработки информации. Чтобы максимально упорядочить действия и упростить процесс реализации защиты информации, все этапы создания безопасной системы выполняются набором мероприятий, которые могут включать:</p>
<ul>
<li>
<p>Техническую защиту информации</p>
</li>
<li>
<p>Программную защиты информации</p>
</li>
<li>
<p>Создание руководящих и нормативных документов для обеспечения ИБ</p>
</li>
</ul>
<p>Конечно же каждый из пунктов можно детализировать, но для общей картины достаточно трех. Итак, отсюда возникает вопрос &quot;На кого учиться&quot;, чтобы заниматься хотя бы одним из пунктов? В России есть специальности, которые могут называться:</p>
<ul>
<li>
<p>Специалист по защите информации</p>
</li>
<li>
<p>Вариации к названию &quot;Защита информационных систем&quot;</p>
</li>
</ul>
<p>Каждая из этих специальностей должна теоритически уметь реализовывать любые мероприятия, которые нужны для обеспечения информационной безопасности и, безусловно, она формально выполняет эту функцию. Однако, когда заходит речь именно о практической составляющей, а не просто в формальном выполнении требований, здесь с точки зрения обучения все не так радужно.</p>
<p>Рынок вакансий в области информационной безопасности сегодня требует, чтобы помимо специалистов по защите информации были и те, кто практически может воспроизводить и разрабатывать методы атак, налаживать мониторинг событий, собирать и систематизировать данные, проводить исследования в области развития атак на информационные системы. Как решаются эти проблемы? Очень просто - силами тех специалистов, которые начинают интересоваться отдельными темами. Чаще всего это:</p>
<ul>
<li>
<p>Специалисты по обратной разработке - исследуют программы и устройства, восстанавливают алгоритм работы</p>
</li>
<li>
<p>Специалисты по расследованию кибер-инцидентов - в случае компрометации системы могут восстановить поледовательность событий</p>
</li>
<li>
<p>Специалисты отделов SOC - занимаются мониторингом и реагированием на события связанные с безопасностью системы</p>
</li>
<li>
<p>Специалисты по тестированию на проникновние - занимаются воспроизведением известных атак на инфомрационные системы для проверки их безопасности</p>
</li>
<li>
<p>Специалист по безопасности сетей - занимается верной настройкой и сопровождением оборудования для сетевого взаимодействия в системе</p>
</li>
<li>
<p>Архитектор безопасности - помогает строить приложения, которые сразу содержат механизмы для построения безопасных систем</p>
</li>
</ul>
<p>На все выше перечисленные специальности есть спрос, но нет ВУЗов, которые на них готовят, всё обучение организовывается либо работодателем на месте, либо специалист сам занимается своим развитием. Как так произошло? Дело в том, что образовательной программе по защите информации уже больше 20 лет, а всё, что связано с информационными технологиями, и в частности с информационной безопасностью, стремительно развивается. Поэтому уже достаточно давно были предложены отдельные специализации, которые существуют в практической плоскости.</p>
<p>Остается вопрос, как в этом ориентироваться и как получить подтверждение квалификации, навыки? Попробуем найти информацию в поисковике.</p>
<h4>Набор курсов и сертификаций</h4>
<p>Снова нас ждет сюрприз, ничего в России перекрывающего большую часть специализаций не найти, поэтому придется пользоваться зарубежными аналогами. В любом случае специальности и так формализаваны только зарубежом. На этом ресурсе можно как раз видеть набор сертификаций и наименования курсов, которые используются для изучения тем связанных с практической и теоритической составляющей ИБ.</p>
<p>Как видно из картинки, здесь есть и разбиение по направлениям и по уровню сложности знаний, которые нужны для получения сертификации. Разделы здесь посвящены:</p>
<ul>
<li>
<p>Communication and Network Security - сетевая безопасность.</p>
</li>
<li>
<p>IAM - аутентификация и логирование доступа.</p>
</li>
<li>
<p>Security Architecture and Engineering - раздел относящийся к созданию безопасных приложений, принципов работы и методов для безопасного обращения с информацией в системах.</p>
</li>
<li>
<p>Asset Security - безопасность хранения данных.</p>
</li>
<li>
<p>Security and Risk Management - риск менеджмент соглано безопасности.</p>
</li>
<li>
<p>Security Assessment and Testing - поиск, идентификация уязвимостей.</p>
</li>
<li>
<p>Software Security - безопасная разработка программного обеспечения.</p>
</li>
<li>
<p>Security Operations - задачи тестирования на проникновение, сбор данных для расследования инцидентов и реагирование на аномалии в системах.</p>
</li>
</ul>
<p>Это более полные разделы по отношению к тем специализациям, которые были описаны в первом пункте, но полностью их перекрывают с точки зрения изучаемых дисциплин и навыков. Практически все курсы, которые можно видеть на рисунке являются платными и проводятся преимущественно за рубежом. Здесь овичку можно составить список в той области, которую он хотел бы изучить и искать материалы курсов. Большая их часть доступна в сети, а если нужно получить сертификацию, то уже рассматривать покупку соответствующего курса.</p>
<p>В завершение хочу пригласить вас на бесплатный урок, где вы узнаете про цикл активной киберзащиты, превентивные меры контроля для противодействия злоумышленникам, а также про существующие модели реагирования на инциденты.</p>
', 'postCover/a8bbf86b-7035-427c-a16d-b1e8e2f99e6b3e91a18af62c5899eda2a13b7b9da0d7.png', '2023-03-22 23:26:08.018005', 20, true);
INSERT INTO public.post (id, header, views, body, cover, created_at, user_id, active) VALUES (53, '5 важнейших сайтов для освоения CSS в 2023 году', 10, '<p>Хотите войти в веб-разработку, но не знаете, с чего начать? Освоение CSS станет отличным стартом и, к счастью для вас, в сети существует огромное количество учебных ресурсов.
Мы провели исследование и собрали 12 наиболее актуальных сайтов, которые помогут вам продвинуться от уровня новичка до профессионала по CSS за кратчайшие сроки.</p>
<p>Будь вы начинающий программист или опытный, на этих сайтах есть информация для всех уровней: от полноценных учебных пособий до памяток и фрагментов кода. Эти ресурсы предоставят вам инструменты и знания, необходимые для создания красивых, функциональных веб-страниц. К тому же большинство из них абсолютно бесплатны.</p>
<p>Так что пристегните ремни и приступайте к написанию кода!</p>
<br>
<p>▍ Flexbox Froggy — освоение Flexbox</p>
<img style="height:350px" src="https://habrastorage.org/r/w1560/webt/5k/jd/i3/5kjdi3pp0opdoqcibksnhk80k7y.png">
<p>Если вы любите играть, то это идеальный сайт для освоения Flexbox. Flexbox Froggy – это восхитительная интерактивная игра, которая научит вас основам синтаксиса Flexbox.
По мере продвижения через уровни каждый «прыжок через пруд» будет становиться всё сложнее. К тому моменту, когда вы поймаете всех лягушек, у вас сформируется твёрдое понимание принципов работы Flexbox, и вы будете готовы использовать этот инструмент в своей работе.</p>
<p>Но не стоит верить нам на слово. Попробуйте Flexbox Froggy, и вы увидите, что ваши знания CSS начнут стремительно расти.</p>
<br>
<p>▍ CSS Grid Garden — освоение CSS Grid</p>
<img style="height:350px" src="https://habrastorage.org/r/w1560/webt/oe/jk/rc/oejkrcifuq6awuqtw1ta5mss9oe.png">
<p>Готовы перенести своё понимание CSS на новый уровень? Если да, то игра <a href="https://cssgridgarden.com/">CSS Grid Garden</a> – для вас!</p>
<p>Эта интерактивная игра научит вас основам Grid Layout — мощной системы построения макетов, которая становится всё более популярной. Задача в этой игре проста – вам нужно поливать сад, и каждый раз, когда вы будете делать это правильно – в него будет добавляться новая строка или столбец.</p>
<p>Для полива требуется написать код CSS и применить его к саду. По мере продвижения, когда вы начнёте успешно проходить всё более сложные уровни, ваше знание CSS Grid возрастёт десятикратно!</p>
<p>CSS Grid Garden также содержит дополнительные уровни для тех, кто желает отточить свои навыки. С помощью этих уровней вы научитесь использовать дроби при проектировании сетки, узнаете, как работает выравнивание при вытягивании элементов по сетке, и даже освоите создание удивительных паттернов с помощью этих элементов.</p>
<p>Плюс всё это можно делать в захватывающем стиле со множеством забавных анимаций и визуальных эффектов.</p>
<br>
<p>▍ Flex Box Adventure</p>
<p><img style="height:350px" src="https://habrastorage.org/r/w1560/webt/we/_2/sc/we_2scu_lhe-t_4wjw1wx9hswkm.png"></p>
<p>Готовы к серьёзному испытанию? <a href="https://codingfantasy.com/games/flexboxadventure">Flex Box Adventure </a> гарантирует его вам.</p>
<p>Обучающая игровая среда Flex Box Adventure требует от вас отвечать на вопросы, создавать макеты на флексбоксах и сражаться со свирепыми монстрами для освоения искусства CSS Flexbox. Ваша цель? Стать «Мастером Flexbox» или «Жрецом CSS».</p>
<p>Это может прозвучать сложно, но представленная в данной игре дружелюбная для пользователя среда не только вдохновит вас, но и обеспечит поддержку для достижения успеха. Не пугайтесь – Flex Box Adventure подходит для людей с любым уровнем навыков. Каждое упражнение сопровождается пошаговыми инструкциями и примерами кода, которые можно использовать в качестве справки.</p>
<br>
<p>▍ Flexbox Zombies</p>
<img style="height:350px" src="https://habrastorage.org/r/w1560/webt/pe/ec/_r/peec_rmrxhkgyyipaymdpwr_3ko.png">
<p>Если вы ищете крутой и весёлый способ изучения основ CSS Flexbox, тогда Flexbox Zombies может оказаться тем, что надо.</p>
<p>С помощью этой интерактивной игры вы будете осваивать особенности Flexbox, сражаясь с зомби и оттачивая навыки написания кода.</p>
<p>Что делает <a href="https://mastery.games/flexboxzombies/">Flexbox Zombies</a> крутым обучающим инструментом:</p>
<ul>
<li>Она даёт вам практический подход к освоению CSS Flexbox.</li>
<li>Требует умелого решения задач для победы над зомби и прохождения уровней Flexbox.</li>
<li>Упрощает запоминание фрагментов кода за счёт мнемоник.</li>
<li>Предлагает реальные задачи, такие как создание строк и столбцов с помощью Flexbox с применением обретённых навыков.</li>
</ul>
<p>Помимо этого, освоение Flexbox также поможет вам повысить навыки решения задач, поскольку использование этого функционала предоставляет инструменты для оптимизации дизайна любой веб-страницы.</p>
<br>
<p>▍ Mozilla Developer Network — ресурсы по CSS и HTML</p>
<img style="height:350px" src="https://habrastorage.org/r/w1560/webt/tg/gn/_t/tggn_tn5vh8m92bfk1zenxeklde.png">
<p><a href="https://developer.mozilla.org/">Mozilla Developer Network</a> – это отличный источник для освоения CSS и HTML. На нём есть всё, начиная с короткого знакомства с HTML, а также пошаговые руководства для изучения основ CSS Grid и Flexbox.</p>
<p>На MDN есть документы, в которых приводится полноценная информация о технологиях, веб-разработке и опенсорсных проектах, включая HTML, CSS, JavaScript, графику, мобильные/десктопные приложения и не только.</p>
<p>Плюс здесь есть форум, где можно задавать вопросы опытным разработчикам и получать ответы в течение считаных часов. MDN также даёт доступ к таблицам совместимости с браузерами, по которым можно выяснить, будут ли используемые вами HTML-элементы или свойства CSS работать с тем или иным браузером.</p>
<p>И если что-то в вашем коде работает не так, MDN поможет эту проблему отладить.</p>
', 'postCover/cdfb8626-da81-42e9-b7d1-a26cbc8f4d78we_2scu_lhe-t_4wjw1wx9hswkm.png', '2023-03-24 21:42:31.347991', 17, true);
INSERT INTO public.post (id, header, views, body, cover, created_at, user_id, active) VALUES (56, 'Spring Data JPA: проекции в запросах', 6, '<p>Вероятно, первое, что приходит вам на ум, когда вы реализуете запрос с помощью Spring Data JPA — это проекции. Это связано с тем фактом, что проекции определяют атрибуты сущности и столбцы базы данных, возвращаемые вашим запросом. А возможность выбирать нужные столбцы очень важна для вашей бизнес-логики. Также это имеет решающее значение для производительности вашего приложения и поддерживаемости вашего кода. Вы можете (и должны) выбрать такую проекцию, которая минимизирует накладные расходы и предоставляет данные в наиболее удобной для использования форме.</p>
<br>
###### Типы проекций, поддерживаемые Spring Data JPA
На основе [возможностей работы с запросами JPA](https://thorben-janssen.com/projections-with-jpa-and-hibernate/), Spring Data JPA предоставляет несколько вариантов для определения идеальной проекции для вашего юзкейса. Вы можете:
<ul>
<li>
<p>Использовать скалярную проекцию (scalar projection), состоящую из одного или нескольких столбцов базы данных, которые возвращаются как Object[]. Эта проекция обеспечивает высокую производительность операции чтения, но используется довольно редко. Это связано с тем, что DTO-проекции предлагают те же преимущества, но гораздо проще в использовании.</p>
</li>
<li>
<p>Использовать DTO-проекцию, которая позволяет выбрать определенный вами набор столбцов базы данных. Она использует их в вызове конструктора и возвращает один или несколько unmanaged объектов. Это отличная проекция, если вам не нужно изменять выбранные данные.</p>
</li>
<li></li>
</ul>
<p>Использовать проекцию сущности (entity projection), которая выбирает все столбцы базы данных, связанные с указанными вами классом сущностью, и возвращает их как managed объект. Рекомендуется использовать именно этот вид проекций, если вам нужно будет изменить полученную информацию.</p>
<p>Вы можете использовать все три типа проекций с производных (derived) и пользовательскими запросами Spring Data JPA. Spring предоставит вам необходимый шаблонный код. Кроме того, это также упрощает использование DTO-проекций и позволяет динамически определять проекцию, возвращаемую методом репозитория.</p>
<br>
<h6>Скалярные проекции</h6>
<p>Скалярные проекции позволяют выбирать атрибуты сущностей, необходимые для вашей бизнес-логики, исключая все остальные. Эта особенность делает эту проекцию отличным выбором для всех операций чтения, если результаты не будет возвращен в виде множества Object[]-ов.</p>
<pre><code>@Repository
public interface BookRepository extends JpaRepository&lt;Book, Long&gt; {
 
    @Query(&quot;SELECT b.id, b.title FROM Book b&quot;)
    List&lt;Object[]&gt; getIdAndTitle();   
}
</code></pre>
<p>Результат запроса, помещенный в Object[], трудно использовать. Вам нужно запоминать, в какой позиции вы выбрали тот или иной атрибут объекта. Кроме того, вам необходимо приводить нужный элемент к правильному типу. Хорошая новость заключается в том, что всего этого можно избежать и определить DTO-проекцию для конкретного юзкейса.</p>
<br>
<h6>DTO-проекции</h6>
<p>При использовании DTO-проекции вы указываете persistence provider’у проецировать каждую запись результата вашего запроса в unmanaged объект. Как я уже рассказывал в предыдущей статья, они работают намного лучше, чем сущности, если вам не нужно изменять выбранные данные. И, в отличие от скалярных проекций, они также очень просты в использовании. Это связано с тем, что DTO именованы и строго типизированы.</p>
<br>
<h6>DTO JPA</h6>
<p>Задача DTO-класса — обеспечить эффективное и строго типизированное представление данных, возвращаемых вашим запросом. Для этого DTO-класс обычно определяет только набор атрибутов, геттеры и сеттеры для каждого из них и конструктор, который устанавливает все атрибуты.</p>
<pre><code>public class AuthorSummaryDTO {
     
    private String firstName;
    private String lastName;
     
    public AuthorSummaryDTO(String firstName, String lastName) {
        this.firstName = firstName;
        this.lastName = lastName;
    }
     
    public String getFirstName() {
        return firstName;
    }
    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }
    public String getLastName() {
        return lastName;
    }
    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
}
</code></pre>
<p>Чтобы использовать этот класс в качестве проекции на чистом JPA, вам нужно добавить <a href="https://thorben-janssen.com/spring-data-jpa-query-annotation/">выражение-конструктор в ваш запрос</a>. Оно описывает вызов конструктора. Оно начинается с ключевого слова new, за которым следует полное имя DTO-класса и список параметров конструктора.</p>
<pre><code>@Repository
public interface AuthorRepository extends CrudRepository&lt;Author, Long&gt; {
 
    @Query(&quot;SELECT new com.thorben.janssen.spring.jpa.projections.dto.AuthorSummaryDTO(a.firstName, a.lastName) FROM Author a WHERE a.firstName = :firstName&quot;)
    List&lt;AuthorSummaryDTO&gt; findByFirstName(String firstName);
}
</code></pre>
<p>Как вы можете видеть из фрагмента кода, приведенного выше, этот подход можно использовать в <a href="https://thorben-janssen.com/spring-data-jpa-query-annotation/">аннотации @Query Spring Data JPA</a>. Затем ваш persistence provider выполняет запрос, который выбирает столбцы, отмеченные указанными атрибутами сущности, и выполняет описанный вызов конструктора.</p>
<pre><code>2020-07-12 20:42:09.875 DEBUG 61380 --- [           main] org.hibernate.SQL                        : select author0_.first_name as col_0_0_, author0_.last_name as col_1_0_ from author author0_ where author0_.first_name=?
</code></pre>
<br>
<h6>Заключение</h6>
<p>Spring Data JPA поддерживает все три проекции, определенные спецификацией JPA. Проекции сущности лучше всего подходят для операций записи. Кроме того, вы должны использовать DTO-проекции на основе классов, когда вам нужны только операции чтения.</p>
', 'postCover/808fcc3d-2258-4e77-8e84-43cbebe317986449793a501d28f173a7c9b4747d200e.png', '2023-03-24 22:36:27.286826', 19, true);


--
-- TOC entry 3436 (class 0 OID 16405)
-- Dependencies: 219
-- Data for Name: post_tags; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.post_tags (post_id, tag_id) VALUES (45, 19);
INSERT INTO public.post_tags (post_id, tag_id) VALUES (45, 22);
INSERT INTO public.post_tags (post_id, tag_id) VALUES (45, 24);
INSERT INTO public.post_tags (post_id, tag_id) VALUES (45, 25);
INSERT INTO public.post_tags (post_id, tag_id) VALUES (46, 21);
INSERT INTO public.post_tags (post_id, tag_id) VALUES (46, 22);
INSERT INTO public.post_tags (post_id, tag_id) VALUES (46, 23);
INSERT INTO public.post_tags (post_id, tag_id) VALUES (46, 25);
INSERT INTO public.post_tags (post_id, tag_id) VALUES (47, 19);
INSERT INTO public.post_tags (post_id, tag_id) VALUES (47, 26);
INSERT INTO public.post_tags (post_id, tag_id) VALUES (48, 19);
INSERT INTO public.post_tags (post_id, tag_id) VALUES (48, 26);
INSERT INTO public.post_tags (post_id, tag_id) VALUES (49, 23);
INSERT INTO public.post_tags (post_id, tag_id) VALUES (49, 24);
INSERT INTO public.post_tags (post_id, tag_id) VALUES (50, 23);
INSERT INTO public.post_tags (post_id, tag_id) VALUES (50, 27);
INSERT INTO public.post_tags (post_id, tag_id) VALUES (50, 28);
INSERT INTO public.post_tags (post_id, tag_id) VALUES (51, 29);
INSERT INTO public.post_tags (post_id, tag_id) VALUES (51, 30);
INSERT INTO public.post_tags (post_id, tag_id) VALUES (51, 31);
INSERT INTO public.post_tags (post_id, tag_id) VALUES (53, 26);
INSERT INTO public.post_tags (post_id, tag_id) VALUES (53, 29);
INSERT INTO public.post_tags (post_id, tag_id) VALUES (56, 22);
INSERT INTO public.post_tags (post_id, tag_id) VALUES (57, 21);
INSERT INTO public.post_tags (post_id, tag_id) VALUES (57, 22);
INSERT INTO public.post_tags (post_id, tag_id) VALUES (57, 19);
INSERT INTO public.post_tags (post_id, tag_id) VALUES (58, 24);
INSERT INTO public.post_tags (post_id, tag_id) VALUES (58, 27);
INSERT INTO public.post_tags (post_id, tag_id) VALUES (58, 28);
INSERT INTO public.post_tags (post_id, tag_id) VALUES (59, 22);


--
-- TOC entry 3437 (class 0 OID 16408)
-- Dependencies: 220
-- Data for Name: tags; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.tags (id, name, description, icon, created_at, active, user_id) VALUES (20, 'Mathematics', 'mother of all sciences', 'tagIcon/dd9c9595-4f46-41a9-b715-75710103648edf2.png', '2023-03-22 20:15:55.427', true, 17);
INSERT INTO public.tags (id, name, description, icon, created_at, active, user_id) VALUES (21, 'PostgreSQL', ' Free object-relational DBMS', 'tagIcon/c36b2f81-6dce-41b1-a4f1-12e91cd80c963916338e24104572809b971807686a8f.png', '2023-03-22 20:17:24.75', true, 17);
INSERT INTO public.tags (id, name, description, icon, created_at, active, user_id) VALUES (22, 'Java', 'Object-oriented programming language', 'tagIcon/81f6d020-14e9-4e53-8c52-c6a1160644a34c9821d2ad5a9844eb6d0f8c77991772.png', '2023-03-22 20:20:49.834', true, 16);
INSERT INTO public.tags (id, name, description, icon, created_at, active, user_id) VALUES (23, 'Information Security', 'Data protection', 'tagIcon/bec78639-3cfa-4c7e-9d5f-b022d4e9b7201352db18765addaa6e0b2ac013d386d8.png', '2023-03-22 20:26:14.165', true, 18);
INSERT INTO public.tags (id, name, description, icon, created_at, active, user_id) VALUES (24, 'Open source', 'Open source software', 'tagIcon/ba363b27-0e22-45be-8fb8-421ca675c38fdc9dbee1d24188b925e86946bafb15c7.png', '2023-03-22 21:35:54.703', true, 17);
INSERT INTO public.tags (id, name, description, icon, created_at, active, user_id) VALUES (25, 'Oracle', 'Database management system', 'tagIcon/bf75879f-ff80-47b7-bbfd-3ced778519b5c9d1a4b6f8257d96fbecc20a2efa199c.png', '2023-03-22 21:37:30.666', true, 17);
INSERT INTO public.tags (id, name, description, icon, created_at, active, user_id) VALUES (26, 'JavaScript ', 'Prototype-oriented programming language', 'tagIcon/48bdbea2-d736-4ca1-9959-a0a3f4b72bf82b399b964d456f3ad1bfddc0346b60d4.png', '2023-03-22 22:36:14.986', true, 18);
INSERT INTO public.tags (id, name, description, icon, created_at, active, user_id) VALUES (27, 'Git ', 'File versioning system', 'tagIcon/2f1e26c4-df9e-40ba-92cf-1d5f518a36003d185363cf28163s014f73a77fbaa0533.jpg', '2023-03-22 23:28:52.948', true, 20);
INSERT INTO public.tags (id, name, description, icon, created_at, active, user_id) VALUES (28, 'GitHub', 'Web service for hosting and development of IT projects', 'tagIcon/4878ee01-5a35-4f0f-9465-870f1a1c840e7570365720336f67615cded621df8bd5.png', '2023-03-22 23:30:01.187', true, 20);
INSERT INTO public.tags (id, name, description, icon, created_at, active, user_id) VALUES (29, 'Game design', 'Visual Game Building', 'tagIcon/eb2343a6-f69b-41d4-bdb5-95ebff710f07510987bd1a854995f2ce76d8fb5e513d.png', '2023-03-23 00:02:26.693', true, 16);
INSERT INTO public.tags (id, name, description, icon, created_at, active, user_id) VALUES (30, 'History of IT', 'Entertaining stories from the past', 'tagIcon/f5730e1c-56e2-4ebf-92da-b25293754cddbbeec149811969c7214c33d0a6911160.png', '2023-03-23 00:03:03.656', true, 16);
INSERT INTO public.tags (id, name, description, icon, created_at, active, user_id) VALUES (31, 'Popular science', 'IT in science and science in IT', 'tagIcon/0351d06f-68e3-4e20-9b35-02fb7fbe20f402f2060b99e6f4d9403eee0420d7d5b8.png', '2023-03-23 00:04:22.867', true, 16);
INSERT INTO public.tags (id, name, description, icon, created_at, active, user_id) VALUES (19, 'Programming', 'The art of creating computer programs', 'tagIcon/2892100e-4b51-4bcd-8315-767552dd366f2asd.png', '2023-03-22 20:06:31.093', true, 16);


--
-- TOC entry 3439 (class 0 OID 16412)
-- Dependencies: 222
-- Data for Name: usr; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.usr (username, email, second_email, password, full_name, description, gender, avatar, country, created_at, active, role, activation_code, id, not_read_notifications) VALUES ('sasha', 'sasha@gg.com', NULL, '$2a$10$gMPdsL9PY7GaSq.ddA/B8.L918igx7RfqqysjtsBaf6SWRW7BIp/K', NULL, NULL, NULL, 'userImg/defaultAvatar.png', NULL, '2023-03-22 20:58:07.648', true, 'ROLE_USER', NULL, 20, 0);
INSERT INTO public.usr (username, email, second_email, password, full_name, description, gender, avatar, country, created_at, active, role, activation_code, id, not_read_notifications) VALUES ('vadim', 'vadim@gg.com', NULL, '$2a$10$9HSsidcQ44grLojTVz2RJuwm4sn6ycSmemCcqPOft2r1driU.7Zmm', NULL, NULL, NULL, 'userImg/defaultAvatar.png', NULL, '2023-03-22 21:02:01.327', true, 'ROLE_USER', NULL, 21, 0);
INSERT INTO public.usr (username, email, second_email, password, full_name, description, gender, avatar, country, created_at, active, role, activation_code, id, not_read_notifications) VALUES ('tim', 'tim@gg.com', NULL, '$2a$10$UFTaaPDgV7WJxze0EiA48u7eS3aadaj5QGfMN0TnqX9dSQLnZg1KK', NULL, NULL, NULL, 'userImg/defaultAvatar.png', NULL, '2023-03-22 21:03:41.762', true, 'ROLE_USER', NULL, 22, 0);
INSERT INTO public.usr (username, email, second_email, password, full_name, description, gender, avatar, country, created_at, active, role, activation_code, id, not_read_notifications) VALUES ('sam', 'sam@gg.com', NULL, '$2a$10$MiWeHCnPqryo0QsTSY89O.3yRvqlC7t8xd./LDnZMijPNJqgnDuBe', NULL, NULL, NULL, 'userImg/defaultAvatar.png', NULL, '2023-03-22 21:07:53.853', true, 'ROLE_USER', NULL, 23, 0);
INSERT INTO public.usr (username, email, second_email, password, full_name, description, gender, avatar, country, created_at, active, role, activation_code, id, not_read_notifications) VALUES ('robert', 'robert@gg.com', NULL, '$2a$10$PAD.gv8L8pik6YX4X/E.feE88GYY8vEcPLqLOx1n2ErtD2jUkTfli', NULL, NULL, NULL, 'userImg/defaultAvatar.png', NULL, '2023-03-22 21:17:00.253', true, 'ROLE_USER', NULL, 24, 0);
INSERT INTO public.usr (username, email, second_email, password, full_name, description, gender, avatar, country, created_at, active, role, activation_code, id, not_read_notifications) VALUES ('mary', 'mary@gg.com', NULL, '$2a$10$P9Ybad3wWl3GRIe2T7JD7..HAjsV4CB39HH5XdSGC7jFUpMVqz7Qa', NULL, NULL, NULL, 'userImg/defaultAvatar.png', NULL, '2023-03-22 21:20:25.542', true, 'ROLE_USER', NULL, 25, 0);
INSERT INTO public.usr (username, email, second_email, password, full_name, description, gender, avatar, country, created_at, active, role, activation_code, id, not_read_notifications) VALUES ('karen', 'karen@gg.com', NULL, '$2a$10$URAv7S/.A0GvOZsYRGE2f.qrj5gLvJPzrmFtzQ0lIAJTL2OUBFVUC', NULL, NULL, NULL, 'userImg/defaultAvatar.png', NULL, '2023-03-22 21:22:05.357', true, 'ROLE_USER', NULL, 26, 0);
INSERT INTO public.usr (username, email, second_email, password, full_name, description, gender, avatar, country, created_at, active, role, activation_code, id, not_read_notifications) VALUES ('john', 'john@gg.com', NULL, '$2a$10$MgweTzYupxxALDl2PTfU5e2gry0mAcsUEeEDEUlN1VBuoWYObU4D.', NULL, NULL, NULL, 'userImg/defaultAvatar.png', NULL, '2023-03-22 21:23:04.71', true, 'ROLE_USER', NULL, 27, 0);
INSERT INTO public.usr (username, email, second_email, password, full_name, description, gender, avatar, country, created_at, active, role, activation_code, id, not_read_notifications) VALUES ('ruslan', 'ruslan@ss.com', NULL, '$2a$10$6/Ts9LLeT.gnJwhYl2pVVuhluG8hrcdoHMaDkL5rmxSL2hz3Y1cVm', NULL, NULL, 'Male', 'userImg/defaultAvatar.png', 'Russian Federation', '2023-03-22 20:54:35.55', true, 'ROLE_USER', NULL, 19, 0);
INSERT INTO public.usr (username, email, second_email, password, full_name, description, gender, avatar, country, created_at, active, role, activation_code, id, not_read_notifications) VALUES ('radim', 'radim@gg.com', NULL, '$2a$10$P.6NTAbCrfCo385XkFWgbO8FqU2SgkOUZHlveXIds7c.rK9Y4Qf1y', NULL, NULL, 'Female', 'userImg/defaultAvatar.png', 'Niger', '2023-03-22 19:43:30.949', true, 'ROLE_USER', NULL, 16, 0);
INSERT INTO public.usr (username, email, second_email, password, full_name, description, gender, avatar, country, created_at, active, role, activation_code, id, not_read_notifications) VALUES ('timur', 'timur2e@gg.com', NULL, '$2a$10$sH87XdqP8X54MEy5eInS7usWAE5UQDYxVZwEdhXP41VvJdnu1ClHu', NULL, NULL, NULL, 'userImg/defaultAvatar.png', NULL, '2023-03-22 20:07:26.274', true, 'ROLE_ADMIN', NULL, 17, 0);
INSERT INTO public.usr (username, email, second_email, password, full_name, description, gender, avatar, country, created_at, active, role, activation_code, id, not_read_notifications) VALUES ('edic', 'edic@gg.com', NULL, '$2a$10$xScQsG945hKdGbo/msN9wO5/5jQ6/EfUzrY8ccwjTcKmUuMBDUxz2', NULL, NULL, NULL, 'userImg/defaultAvatar.png', NULL, '2023-03-22 20:22:19.284', true, 'ROLE_USER', NULL, 18, 0);
INSERT INTO public.usr (username, email, second_email, password, full_name, description, gender, avatar, country, created_at, active, role, activation_code, id, not_read_notifications) VALUES ('valera', 'valera@gss.com', NULL, '$2a$10$7FHlt6iiXPzjqvb6m3DpkuC7Sum.vWFgWwvSdjCw1inSiWAJuTnT.', NULL, NULL, NULL, 'userImg/defaultAvatar.png', NULL, '2023-04-10 16:39:43.123', true, 'ROLE_USER', NULL, 29, 0);
INSERT INTO public.usr (username, email, second_email, password, full_name, description, gender, avatar, country, created_at, active, role, activation_code, id, not_read_notifications) VALUES ('vlad', 'asd@asd.com', NULL, '$2a$10$FKnkyZaBakkfX9h9619quuZ7SXpyCNndV/4SCYC25J0wxDdzml7ui', NULL, NULL, NULL, 'userImg/defaultAvatar.png', NULL, '2023-04-10 16:36:56.303', true, 'ROLE_USER', NULL, 28, 0);


--
-- TOC entry 3441 (class 0 OID 16418)
-- Dependencies: 224
-- Data for Name: usr_notification; Type: TABLE DATA; Schema: public; Owner: postgres
--



--
-- TOC entry 3442 (class 0 OID 16421)
-- Dependencies: 225
-- Data for Name: usr_tag; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.usr_tag (usr_id, tag_id) VALUES (19, 19);
INSERT INTO public.usr_tag (usr_id, tag_id) VALUES (17, 22);
INSERT INTO public.usr_tag (usr_id, tag_id) VALUES (17, 28);
INSERT INTO public.usr_tag (usr_id, tag_id) VALUES (17, 24);
INSERT INTO public.usr_tag (usr_id, tag_id) VALUES (17, 23);
INSERT INTO public.usr_tag (usr_id, tag_id) VALUES (19, 29);
INSERT INTO public.usr_tag (usr_id, tag_id) VALUES (17, 29);
INSERT INTO public.usr_tag (usr_id, tag_id) VALUES (17, 21);
INSERT INTO public.usr_tag (usr_id, tag_id) VALUES (29, 21);
INSERT INTO public.usr_tag (usr_id, tag_id) VALUES (17, 20);
INSERT INTO public.usr_tag (usr_id, tag_id) VALUES (29, 20);


--
-- TOC entry 3450 (class 0 OID 0)
-- Dependencies: 226
-- Name: message_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.message_id_seq', 13, true);


--
-- TOC entry 3451 (class 0 OID 0)
-- Dependencies: 216
-- Name: notifications_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.notifications_id_seq', 74, true);


--
-- TOC entry 3452 (class 0 OID 0)
-- Dependencies: 218
-- Name: post_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.post_id_seq', 61, true);


--
-- TOC entry 3453 (class 0 OID 0)
-- Dependencies: 221
-- Name: tags_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.tags_id_seq', 32, true);


--
-- TOC entry 3454 (class 0 OID 0)
-- Dependencies: 223
-- Name: usr_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.usr_id_seq', 29, true);


--
-- TOC entry 3255 (class 2606 OID 16437)
-- Name: chanel_subscriber chanel_subscriber_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.chanel_subscriber
    ADD CONSTRAINT chanel_subscriber_pkey PRIMARY KEY (chanel_id, subscriber_id);


--
-- TOC entry 3275 (class 2606 OID 16518)
-- Name: comment message_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.comment
    ADD CONSTRAINT message_pkey PRIMARY KEY (id);


--
-- TOC entry 3257 (class 2606 OID 16439)
-- Name: notification notifications_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.notification
    ADD CONSTRAINT notifications_pkey PRIMARY KEY (id);


--
-- TOC entry 3259 (class 2606 OID 16441)
-- Name: post post_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.post
    ADD CONSTRAINT post_pkey PRIMARY KEY (id);


--
-- TOC entry 3261 (class 2606 OID 16443)
-- Name: post_tags post_tags_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.post_tags
    ADD CONSTRAINT post_tags_pkey PRIMARY KEY (post_id, tag_id);


--
-- TOC entry 3263 (class 2606 OID 16445)
-- Name: tags tags_name_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tags
    ADD CONSTRAINT tags_name_key UNIQUE (name);


--
-- TOC entry 3265 (class 2606 OID 16447)
-- Name: tags tags_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tags
    ADD CONSTRAINT tags_pkey PRIMARY KEY (id);


--
-- TOC entry 3271 (class 2606 OID 16449)
-- Name: usr_notification usr_notification_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.usr_notification
    ADD CONSTRAINT usr_notification_pkey PRIMARY KEY (usr_id, notification_id);


--
-- TOC entry 3267 (class 2606 OID 16451)
-- Name: usr usr_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.usr
    ADD CONSTRAINT usr_pkey PRIMARY KEY (id);


--
-- TOC entry 3273 (class 2606 OID 16453)
-- Name: usr_tag usr_tag_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.usr_tag
    ADD CONSTRAINT usr_tag_pkey PRIMARY KEY (usr_id, tag_id);


--
-- TOC entry 3269 (class 2606 OID 16455)
-- Name: usr usr_username_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.usr
    ADD CONSTRAINT usr_username_key UNIQUE (username);


--
-- TOC entry 3276 (class 2606 OID 16456)
-- Name: chanel_subscriber chanel_subscriber_chanel_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.chanel_subscriber
    ADD CONSTRAINT chanel_subscriber_chanel_id_fkey FOREIGN KEY (chanel_id) REFERENCES public.usr(id);


--
-- TOC entry 3277 (class 2606 OID 16461)
-- Name: chanel_subscriber chanel_subscriber_subscriber_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.chanel_subscriber
    ADD CONSTRAINT chanel_subscriber_subscriber_id_fkey FOREIGN KEY (subscriber_id) REFERENCES public.usr(id);


--
-- TOC entry 3287 (class 2606 OID 16539)
-- Name: comment message_post_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.comment
    ADD CONSTRAINT message_post_id_fkey FOREIGN KEY (post_id) REFERENCES public.post(id);


--
-- TOC entry 3288 (class 2606 OID 16519)
-- Name: comment message_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.comment
    ADD CONSTRAINT message_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.usr(id);


--
-- TOC entry 3278 (class 2606 OID 16466)
-- Name: notification notification_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.notification
    ADD CONSTRAINT notification_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.usr(id);


--
-- TOC entry 3280 (class 2606 OID 16471)
-- Name: post_tags post_tags_post_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.post_tags
    ADD CONSTRAINT post_tags_post_id_fkey FOREIGN KEY (post_id) REFERENCES public.post(id);


--
-- TOC entry 3281 (class 2606 OID 16476)
-- Name: post_tags post_tags_tag_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.post_tags
    ADD CONSTRAINT post_tags_tag_id_fkey FOREIGN KEY (tag_id) REFERENCES public.tags(id);


--
-- TOC entry 3279 (class 2606 OID 16481)
-- Name: post post_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.post
    ADD CONSTRAINT post_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.usr(id);


--
-- TOC entry 3282 (class 2606 OID 16486)
-- Name: tags tags_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tags
    ADD CONSTRAINT tags_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.usr(id) ON DELETE SET NULL;


--
-- TOC entry 3283 (class 2606 OID 16491)
-- Name: usr_notification usr_notification_notification_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.usr_notification
    ADD CONSTRAINT usr_notification_notification_id_fkey FOREIGN KEY (notification_id) REFERENCES public.notification(id);


--
-- TOC entry 3284 (class 2606 OID 16496)
-- Name: usr_notification usr_notification_usr_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.usr_notification
    ADD CONSTRAINT usr_notification_usr_id_fkey FOREIGN KEY (usr_id) REFERENCES public.usr(id);


--
-- TOC entry 3285 (class 2606 OID 16501)
-- Name: usr_tag usr_tag_tag_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.usr_tag
    ADD CONSTRAINT usr_tag_tag_id_fkey FOREIGN KEY (tag_id) REFERENCES public.tags(id);


--
-- TOC entry 3286 (class 2606 OID 16506)
-- Name: usr_tag usr_tag_usr_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.usr_tag
    ADD CONSTRAINT usr_tag_usr_id_fkey FOREIGN KEY (usr_id) REFERENCES public.usr(id);


-- Completed on 2023-04-10 21:06:25 MSK

--
-- PostgreSQL database dump complete
--

